/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  11
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
scale 0.001;

vertices #codeStream
{
    codeInclude
    #{
        #include "pointField.H"
    #};

    code
    #{
        pointField points(18);

        points[0]   = point(-1000,            0,    0.5);
        points[1]   = point(-232.84,          0,    0.5);
        points[2]   = point(0,                0,    0.5);
        points[2]   = point(0,                0,    0.5);
        points[3]   = point(144,              0,    0.5);
        points[4]   = point(1000,             0,    0.5);
        points[5]   = point(0,              120,    0.5);
        points[6]   = point(144,            120,    0.5);
        points[7]   = point(1000,           120,    0.5);
        points[8]   = point(-116.42,     139.88,    0.5);
        points[9]   = point(0,              120,    0.5);
        points[10]  = point(144,            120,    0.5);
        points[11]  = point(1000,           120,    0.5);
        points[12]  = point(-1000,          240,    0.5);
        points[13]  = point(-232.84,        240,    0.5);
        points[14]  = point(-232.84,        240,    0.5);
        points[15]  = point(0,              240,    0.5);
        points[16]  = point(144,            240,    0.5);
        points[17]  = point(1000,           240,    0.5);

        // Duplicate x points
        label sz = points.size();
        points.setSize(2*sz);
        for (label i = 0; i < sz; i++)
        {
            const point& pt = points[i];
            points[i+1*sz] = point( pt.x(), pt.y(), -pt.z());
        }
        
        os  << points;
    #};
};

blocks
(
    hex ( 0 12 13  1 18 30 31 19) (20  60 1) simpleGrading (1 1 1) //0
    hex ( 1 13  5  2 19 31 23 20) (20  40 1) simpleGrading (1 1 1) //1
    hex ( 2  5  6  3 20 23 24 21) (20  20 1) simpleGrading (1 1 1) //2
    hex ( 3  6  7  4 21 24 25 22) (20 120 1) simpleGrading (1 1 1) //3
    hex ( 8 14 15  9 26 32 33 27) (20  20 1) simpleGrading (1 1 1) //4
    hex ( 9 15 16 10 27 33 34 28) (20  20 1) simpleGrading (1 1 1) //5
    hex (10 16 17 11 28 34 35 29) (20 120 1) simpleGrading (1 1 1) //6
);

edges
(
   spline  9   8
   (
    (-29.1051   121.1691   0.5)
    (-58.2102   124.7297   0.5)
    (-87.3153   130.8549   0.5)
   )
   spline  8  14
   ( 
    (-145.5256  152.4414   0.5)
    (-174.6307  169.7420   0.5)
    (-203.7358  194.6769   0.5)
   )

   spline 27  26
   (
    (-29.1051   121.1691  -0.5)
    (-58.2102   124.7297  -0.5)
    (-87.3153   130.8549  -0.5)
   )
   spline 26 32
   (
    (-145.5256  152.4414  -0.5)
    (-174.6307  169.7420  -0.5)
    (-203.7358  194.6769  -0.5)
   )

   spline  5  13
   (
    (-29.1051   121.1691   0.5)
    (-58.2102   124.7297   0.5)
    (-87.3153   130.8549   0.5)
    (-145.5256  152.4414   0.5)
    (-174.6307  169.7420   0.5)
    (-203.7358  194.6769   0.5)
   )
   spline 23  31
   (
    (-29.1051   121.1691  -0.5)
    (-58.2102   124.7297  -0.5)
    (-87.3153   130.8549  -0.5)
    (-145.5256  152.4414  -0.5)
    (-174.6307  169.7420  -0.5)
    (-203.7358  194.6769  -0.5)
   )
);

defaultPatch
{
    type empty;
}

boundary
(
    down
    {
        type symmetryPlane;
        faces
        (
            ( 0  1 19 18)
            ( 1  2 20 19)
            ( 2  3 21 20)
            ( 3  4 22 21)
        );
    }
    up
    {
        type wall;
        faces
        (
            (12 30 31 13)
            (14 32 33 15)
            (15 33 34 16)
            (16 34 35 17)
        );
    }
    right
    {
        type patch;
        faces
        (
            ( 4  7 25 22)
            (11 17 35 29)
        );
    }
    left
    {
        type patch;
        faces
        (
            ( 0 18 30 12)
        );
    }
    nozzle
    {
        type wall;
        faces
        (
            ( 5 23 31 13)
            ( 5  6 24 23)
            ( 8 14 32 26)
            ( 8 26 27  9)
            ( 9 27 28 10)
        );
    }
    master1
    {
        type patch;
        faces
        (
            (11 10 28 29)
        );
    }
    slave1
    {
        type patch;
        faces
        (
            ( 6  7 25 24)
        );
    }
);

mergePatchPairs
(
    (master1 slave1)
);

// ************************************************************************* //